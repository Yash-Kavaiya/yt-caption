name: Process YouTube Videos

on:
  push:
    branches:
      - main
      - master
    paths:
      - '**/*.txt'
  workflow_dispatch:

jobs:
  process:
    runs-on: ubuntu-latest
    timeout-minutes: 240
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y ffmpeg
          pip install -U pip
          pip install -U yt-dlp pillow

      - name: Create processor script
        run: |
          cat > process.py << 'PYEND'
          import os, sys, subprocess, tempfile, shutil, json, re
          from pathlib import Path
          from PIL import Image
          
          def clean(s):
              for c in '<>:"/\\|?*': s = s.replace(c, '')
              return s.strip('. ')[:100].replace(' ', '_')
          
          def info(url):
              url = re.sub(r'[&?](list|index)=[^&]*', '', url)
              try:
                  r = subprocess.run(['yt-dlp', '--dump-json', url], 
                                    capture_output=True, text=True, timeout=30, check=True)
                  d = json.loads(r.stdout)
                  return {'title': d.get('title', 'video'), 'duration': d.get('duration', 0)}
              except: return None
          
          def download(url, vpath, tpath):
              url = re.sub(r'[&?](list|index)=[^&]*', '', url)
              try:
                  subprocess.run(['yt-dlp', '-f', 'best[ext=mp4]/best', '-o', vpath,
                                '--write-auto-subs', '--sub-lang', 'en', '--convert-subs', 'srt', url],
                               check=True, timeout=600)
                  vdir = os.path.dirname(vpath)
                  vbase = os.path.splitext(os.path.basename(vpath))[0]
                  for p in [f'{vbase}.en.srt', f'{vbase}.srt']:
                      sf = os.path.join(vdir, p)
                      if os.path.exists(sf):
                          with open(sf) as f: lines = f.readlines()
                          text = []
                          for line in lines:
                              line = line.strip()
                              if line and not line.isdigit() and '-->' not in line:
                                  text.append(re.sub('<[^>]+>', '', line))
                          with open(tpath, 'w') as f:
                              f.write('VIDEO TRANSCRIPT\n' + '='*50 + '\n\n')
                              f.write(' '.join(text))
                          return True, True
                  return True, False
              except: return False, False
          
          def screenshots(vpath, outdir, interval, prefix):
              try:
                  os.makedirs(outdir, exist_ok=True)
                  r = subprocess.run(['ffprobe', '-v', 'error', '-show_entries', 
                                    'format=duration', '-of', 'default=noprint_wrappers=1:nokey=1', vpath],
                                   capture_output=True, text=True, check=True)
                  dur = float(r.stdout.strip())
                  files = []
                  t = 0
                  while t <= dur:
                      out = os.path.join(outdir, f'{prefix}_{int(t):04d}s.png')
                      subprocess.run(['ffmpeg', '-ss', str(t), '-i', vpath, '-vframes', '1', '-y', out],
                                   stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True)
                      files.append(out)
                      print(f'  {int(t/dur*100):3d}% [{int(t)}s]')
                      t += interval
                  return files
              except: return []
          
          def makepdf(imgdir, pdfpath):
              try:
                  imgs = sorted(Path(imgdir).glob('*.png'))
                  if not imgs: return False
                  pimgs = []
                  for ip in imgs:
                      img = Image.open(ip)
                      if img.mode != 'RGB': img = img.convert('RGB')
                      pimgs.append(img)
                  if pimgs:
                      pimgs[0].save(pdfpath, 'PDF', save_all=True, 
                                   append_images=pimgs[1:] if len(pimgs)>1 else [])
                      print(f'  PDF: {os.path.getsize(pdfpath)/(1024*1024):.1f}MB')
                      return True
                  return False
              except: return False
          
          def process(url, interval, outdir):
              print(f'\n{"="*60}')
              print(f'URL: {url}')
              print(f'Interval: {interval}s')
              
              inf = info(url)
              if not inf:
                  print('ERROR: Cannot get video info')
                  return False
              
              title = clean(inf['title'])
              print(f'Title: {inf["title"]}')
              
              vdir = Path(outdir) / title
              imgdir = vdir / 'images'
              imgdir.mkdir(parents=True, exist_ok=True)
              
              with tempfile.TemporaryDirectory() as tmp:
                  vpath = os.path.join(tmp, 'video.mp4')
                  tpath = vdir / f'{title}_transcript.txt'
                  
                  print('Downloading...')
                  ok, hastrans = download(url, vpath, tpath)
                  if not ok:
                      print('ERROR: Download failed')
                      return False
                  
                  print('Creating screenshots...')
                  files = screenshots(vpath, imgdir, interval, title)
                  if not files:
                      print('ERROR: Screenshot failed')
                      return False
                  
                  print(f'Screenshots: {len(files)}')
                  
                  pdfpath = vdir / f'{title}_HD.pdf'
                  print('Creating PDF...')
                  makepdf(imgdir, pdfpath)
                  
                  print(f'SUCCESS: {vdir}')
                  return True
          
          if __name__ == '__main__':
              if len(sys.argv) != 4:
                  print('Usage: process.py <url> <interval> <outdir>')
                  sys.exit(1)
              sys.exit(0 if process(sys.argv[1], int(sys.argv[2]), sys.argv[3]) else 1)
          PYEND

      - name: Process all videos
        run: |
          mkdir -p output
          
          echo "Finding .txt files..."
          find . -type f -name "*.txt" \
            ! -name "requirements*.txt" \
            ! -name "deps.txt" \
            ! -path "./output/*" \
            ! -path "./.git/*" \
            ! -path "./.github/*" | sort > files_to_process.txt
          
          echo "Files to process:"
          cat files_to_process.txt
          
          SUCCESS=0
          FAILED=0
          
          while read txtfile; do
            echo ""
            echo "###############################################"
            echo "# Processing: $txtfile"
            echo "###############################################"
            
            while IFS= read -r line || [ -n "$line" ]; do
              # Skip empty and comments
              [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
              
              # Get URL and interval
              URL=$(echo "$line" | cut -d',' -f1 | tr -d ' ')
              INTERVAL=$(echo "$line" | cut -d',' -f2 | tr -d ' ')
              
              # Validate URL
              if [[ ! "$URL" =~ youtube\.com ]] && [[ ! "$URL" =~ youtu\.be ]]; then
                echo "SKIP: Not a YouTube URL: $URL"
                continue
              fi
              
              # Default interval
              if [[ -z "$INTERVAL" || "$INTERVAL" == "$URL" ]]; then
                INTERVAL=5
              fi
              
              echo ""
              echo ">>> Processing Video"
              echo "    URL: $URL"
              echo "    Interval: ${INTERVAL}s"
              
              # Process
              if python process.py "$URL" "$INTERVAL" output; then
                echo "    STATUS: ✅ SUCCESS"
                SUCCESS=$((SUCCESS + 1))
              else
                echo "    STATUS: ❌ FAILED"
                FAILED=$((FAILED + 1))
              fi
              
              # Delay to avoid rate limiting
              echo "    Waiting 5 seconds..."
              sleep 5
              
            done < "$txtfile"
            
          done < files_to_process.txt
          
          echo ""
          echo "###############################################"
          echo "# SUMMARY"
          echo "###############################################"
          echo "SUCCESS: $SUCCESS"
          echo "FAILED:  $FAILED"
          echo "###############################################"

      - name: Create index
        run: |
          cat > output/README.md << 'MDEND'
          # YouTube Video Processing Results
          
          ## Videos Processed
          
          MDEND
          
          if [ -d output ] && [ "$(ls -A output)" ]; then
            echo "| # | Title | Files |" >> output/README.md
            echo "|---|-------|-------|" >> output/README.md
            
            i=1
            for dir in output/*/; do
              if [ -d "$dir" ]; then
                name=$(basename "$dir")
                pdf="${name}_HD.pdf"
                txt="${name}_transcript.txt"
                
                files=""
                [ -f "$dir/$pdf" ] && files="$files [PDF](./$name/$pdf)"
                [ -f "$dir/$txt" ] && files="$files [TXT](./$name/$txt)"
                
                if [ -n "$files" ]; then
                  echo "| $i | $name | $files |" >> output/README.md
                  i=$((i + 1))
                fi
              fi
            done
          else
            echo "No videos processed." >> output/README.md
          fi
          
          echo "" >> output/README.md
          echo "Generated: $(date)" >> output/README.md

      - name: Show results
        run: |
          echo "Output directory contents:"
          ls -la output/
          echo ""
          echo "Generated files:"
          find output -type f -name "*.pdf" -o -name "*_transcript.txt" | sort

      - name: Upload PDFs
        uses: actions/upload-artifact@v4
        with:
          name: pdfs
          path: output/**/*_HD.pdf
          if-no-files-found: warn

      - name: Upload transcripts
        uses: actions/upload-artifact@v4
        with:
          name: transcripts
          path: output/**/*_transcript.txt
          if-no-files-found: warn

      - name: Upload all
        uses: actions/upload-artifact@v4
        with:
          name: complete-output
          path: output/

      - name: Commit to repo
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add output/
          
          if ! git diff --staged --quiet; then
            git commit -m "Add processed videos [skip ci]"
            git push || echo "Could not push (check permissions)"
          else
            echo "No changes to commit"
          fi
